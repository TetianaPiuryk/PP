openapi: 3.0.0
info:
  title: Playlist API
  description: Service for creating playlists
  contact:
    name: CreateYourPlaylist
    url: http://createyourplaylist.com
  version: 1.0.0
servers:
  - url: http://serversapi.com
tags:
  - name: User
  - name: Playlist
  - name: Song
  
paths:
  /User:
    post:
      tags:
      - User
      summary: Create a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: User created successfully!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        405:
          description: Invalid input
          content: {}
        
    put:
      tags:
      - User
      summary: Update user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User updated successfully!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content: {}
        500:
          description: Cannot update user 
          content: {}
      security:
      - api_auth:
        - update:user
        
    delete:
      tags:
      - User
      summary: Delete user
      responses:
        201:
          description: User deleted successfully!
          content: {}
      security:
      - api_auth:
        - delete:user
  
  /User/{name}:      
    get:
      tags:
      - User
      summary: Find a user by name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success!
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content: {}
          
  /User/login:
    get:
      tags:
        - User
      summary: Log in 
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: integer 
            format: int64
      responses:
        200:
          description: Log in successfully!
          content:
            application/json:
              schema:
                type: integer
                format: int64
        400:
          description: Invalid name/password
          content: {}
          
  /User/logout:
    get:
      tags:
        - User
      summary: Log out 
      responses:
        200:
          description: Log out successfully!
          content: {}
          
  /Playlist:
    post:
      tags:
      - Playlist
      summary: Create a new playlist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
        required: true
      responses:
        201:
          description: Playlist created successfully!
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        405:
          description: Invalid input
          content: {}
      security:
        - api_auth:
          - create:playlist
          
  /Playlist/{id}:        
    delete:
      tags:
      - Playlist
      summary: Delete playlist 
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: Playlist deleted successfully!
          content: {}
        400:
          description: Bad request
          content: {}
        404:
          description: Paylist not found
          content: {} 
      security:
        - api_auth:
          - delete:playlist
      
  
  /Playlist/UpdatePublicPlaylist/{id}:
    put:
      tags:
      - Playlist
      summary: Update public playlist 
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
      responses:
        201:
          description: Playlist updated successfully!
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        404:
          description: Paylist not found
          content: {}
        500:
          description: Cannot update playlist
          content: {}
          
  /Playlist/UpdatePrivatePlaylist/{id}:
    put:
      tags:
      - Playlist
      summary: Update private playlist 
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
      responses:
        201:
          description: Playlist updated successfully!
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        404:
          description: Paylist not found
          content: {}
        500:
          description: Cannot update playlist
          content: {}
      security:
      - api_auth:
        - update:playlists
        
  /Playlist/{name}:
    get:
      tags:
      - Playlist
      summary: Find a playlist by name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success!
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        404:
          description: Paylist not found
          content: {}
        
  /Song:
    post:
      tags:
      - Song
      summary: Add a new song
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
        required: true
      responses:
        201:
          description: Song added successfully!
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        405:
          description: Invalid input
          content: {}
      security:
        - api_auth:
          - add:song
          
  /Song/{id}:        
    delete:
      tags:
      - Song
      summary: Delete song
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: Song deleted successfully!
          content: {}
        400:
          description: Bad request
          content: {}
        404:
          description: Song not found
          content: {} 
      security:
        - api_auth:
          - delete:song
          
  /Song/{name}:
    get:
      tags:
      - Song
      summary: Find a song by name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success!
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        404:
          description: Song not found
          content: {}
        
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer 
          format: int64
        name:
          type: string
        age:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: integer 
          format: int64
        privatePlaylists:
          type: array 
          items:
            $ref: '#/components/schemas/Playlist'
        favouritePlaylist:
          type: string
      xml:
        name: User
    
    Playlist:
      type: object
      properties:
        id:
          type: integer 
          format: int64
        name:
          type: string
        numberOfSongs:
          type: integer 
          format: int64
        dateOfCreation:
          type: integer 
          format: date
        typeOfPlaylist:
          type: string
          enum:
          - public
          - private
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
      xml:
        name: Playlist
        
    Song:
      type: object
      properties:
        id:
          type: integer 
          format: int64
        name:
          type: string
        author:
          type: string
        duration:
          type: integer 
          format: int64
      xml:
        name: Song
     
  securitySchemes:
    api_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://playlist.com/oauth2/authrize
          scopes:
            update:user: update user  
            delete:user: delete user
            create:playlist: create playlist
            delete:playlist: delete playlist
            update:playlist: update playlist
            add:song: add song
            delete:song: delete song
        
        
        
        
        